// <auto-generated />
using System;
using E_LOGO.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_LOGO.Migrations
{
    [DbContext(typeof(E_LOGOContext))]
    [Migration("20201013104215_DateResponsesPatients")]
    partial class DateResponsesPatients
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("E_LOGO.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Diagnostique")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("LastTaskDoneID")
                        .HasColumnType("int");

                    b.Property<int>("SpeechTherapistID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Fullname")
                        .IsUnique();

                    b.HasIndex("SpeechTherapistID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("E_LOGO.Models.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Choice")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StimuliID")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("isGoodAnswer")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("StimuliID");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("E_LOGO.Models.ResponsesPatient", b =>
                {
                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("ResponseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PatientID", "ResponseID");

                    b.HasIndex("ResponseID");

                    b.ToTable("ResponsesPatient");
                });

            modelBuilder.Entity("E_LOGO.Models.SpeechTherapist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("SpeechTherapists");
                });

            modelBuilder.Entity("E_LOGO.Models.Stimuli", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("TaskID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TaskID");

                    b.ToTable("Stimulis");
                });

            modelBuilder.Entity("E_LOGO.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("E_LOGO.Models.Patient", b =>
                {
                    b.HasOne("E_LOGO.Models.SpeechTherapist", "SpeechTherapist")
                        .WithMany("Patients")
                        .HasForeignKey("SpeechTherapistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_LOGO.Models.Response", b =>
                {
                    b.HasOne("E_LOGO.Models.Stimuli", "Stimuli")
                        .WithMany("Responses")
                        .HasForeignKey("StimuliID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_LOGO.Models.ResponsesPatient", b =>
                {
                    b.HasOne("E_LOGO.Models.Patient", "Patient")
                        .WithMany("ResponsesPatient")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_LOGO.Models.Response", "Response")
                        .WithMany("ResponsesPatients")
                        .HasForeignKey("ResponseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_LOGO.Models.Stimuli", b =>
                {
                    b.HasOne("E_LOGO.Models.Task", "Task")
                        .WithMany("Stimulis")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
